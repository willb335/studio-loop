---
/**
 * FAQ component - Objection handler with accordion interface
 * 
 * Addresses critical questions and objections from potential users.
 * Implements accordion pattern for expandable Q&A sections.
 * Designed to build trust and overcome common concerns.
 * 
 * @see docs/OBJECTION_HANDLER_FAQ.md - Source content
 * @see docs/LANDING_PAGE_OPTIMIZATION_STRATEGY.md - Implementation strategy (lines 369-432)
 */

/**
 * FAQ data structure containing questions and detailed answers
 * Each item includes a question, answer, and category for organization
 */
const faqs = [
  {
    id: "fitgrid-difference",
    question: "How is this different from FitGrid?",
    answer: `Three key differences:

1. **Price:** $29/mo vs FitGrid's $169–$325/mo (about 80–90% less)
2. **Simplicity:** Laser‑focused on automated post‑class emails (no feature
   bloat) with a 5‑minute setup
3. **Reliability:** Polished instructor web app for setting email templates; FitGrid’s instructor app is
   low‑rated (2.4/5 on Google Play as of Oct 2025)

We built the one thing that drives retention and spend—and removed the
complexity that slows teams down.`,
    category: "product",
  },
  {
    id: "mindbody-integration",
    question: "Do I need to switch from Mindbody?",
    answer: `No switching. Connect your existing Mindbody account in minutes. We sync schedules, rosters, and instructor data automatically and send follow‑ups without any new daily tasks for your team.`,
    category: "technical",
  },
  {
    id: "pricing-catch",
    question:
      "If it’s so much cheaper than FitGrid, what’s the catch? What’s included?",
    answer: `No catch—just focus.

**Included at $29/mo:**
- Automated post‑class follow‑up emails
- Basic feedback collection and analytics (opens/clicks)
- Email Template customization for instructors.
- Direct Mindbody connection

**Not in v1:**
- SMS messaging
- Advanced AI segmentation/win‑backs
- Multi‑location enterprise controls

You pay less because we ship only what most boutiques actually use.`,
    category: "pricing",
  },
  {
    id: "proof-of-effectiveness",
    question: "How do I know this actually works?",
    answer: `The tactic is proven: FitGrid’s public case studies report biguplifts from post‑class follow‑ups (higher return rates and spend), and industry data shows retention outperforms acquisition on ROI. We’ll share anonymized results from the first cohort (open/return metrics) so you cansee the impact—and decide with data.`,
    category: "results",
  },
  {
    id: "money-back-guarantee",
    question: "What if I don’t like it or don’t see results?",
    answer: `No contracts. Cancel anytime. Plus a **60‑day money‑back guarantee**: if your engagement metrics don’t improve in the first two months, we’ll refund 100%. Zero risk to try.`,
    category: "risk",
  }
 
];
---

<section id="faq" class="bg-white py-20 sm:py-24 lg:py-32" aria-labelledby="faq-heading">
  <div class="max-w-4xl mx-auto px-5 sm:px-10 lg:px-20">
    <!-- Section Header -->
    <div class="text-center mb-12 sm:mb-16">
      <h2 id="faq-heading" class="font-heading text-3xl sm:text-4xl lg:text-[2.75rem] font-semibold text-neutral-900 mb-6 leading-tight">
        Your Questions, Honestly Answered
      </h2>
      <p class="font-body text-lg sm:text-xl text-neutral-600 leading-relaxed max-w-2xl mx-auto">
        We know you've been burned before. Here's the truth about what we're building.
      </p>
    </div>

    <!-- FAQ Accordion -->
    <div class="space-y-4" role="list" aria-label="Frequently asked questions">
      {faqs.map((faq, index) => (
        <article
          class="faq-item border border-neutral-200 rounded-xl overflow-hidden transition-colors duration-300"
          data-faq-id={faq.id}
          role="listitem"
        >
          <button
            type="button"
            class="faq-button w-full text-left px-6 sm:px-8 py-6 flex items-start justify-between gap-4 hover:bg-neutral-50 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-neutral-300 focus:ring-inset"
            aria-expanded="false"
            aria-controls={`faq-answer-${faq.id}`}
            data-faq-button="true"
          >
            <span class="font-heading text-lg sm:text-xl font-semibold text-neutral-900 pr-4 leading-snug">
              {faq.question}
            </span>
            <svg
              class="faq-icon flex-shrink-0 w-6 h-6 transition-transform duration-300"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
              aria-hidden="true"
            >
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
            </svg>
          </button>
          
          <div
            id={`faq-answer-${faq.id}`}
            class="faq-answer overflow-hidden transition-all duration-300"
            style="max-height: 0;"
            aria-hidden="true"
            data-faq-answer="true"
          >
            <div class="px-6 sm:px-8 pb-6 pt-2">
              <div class="font-body text-base sm:text-lg text-neutral-600 leading-relaxed prose prose-neutral max-w-none [&>p]:mb-4 [&>ul]:ml-6 [&>ul]:list-disc [&>ul]:space-y-2 [&>ul]:mb-4 [&_strong]:text-neutral-900 [&_strong]:font-semibold">
                {faq.answer.split('\n').map((paragraph: string, idx: number) => {
                  if (paragraph.trim().startsWith('•')) {
                    const items = faq.answer.split('\n').filter((line: string) => line.trim().startsWith('•'));
                    return (
                      <ul class="list-disc ml-6 space-y-2 mb-4">
                        {items.map((item: string, itemIdx: number) => (
                          <li>{item.replace('•', '').trim()}</li>
                        ))}
                      </ul>
                    );
                  } else if (paragraph.includes('**')) {
                    const parts = paragraph.split(/(\*\*.*?\*\*)/g);
                    return (
                      <p>
                        {parts.map((part: string, partIdx: number) => {
                          if (part.startsWith('**') && part.endsWith('**')) {
                            return <strong>{part.slice(2, -2)}</strong>;
                          }
                          return part;
                        })}
                      </p>
                    );
                  } else if (paragraph.trim()) {
                    return <p>{paragraph}</p>;
                  }
                  return null;
                })}
              </div>
            </div>
          </div>
        </article>
      ))}
    </div>

    <!-- Bottom CTA -->
    <div class="mt-12 sm:mt-16 text-center">
      <p class="font-body text-base sm:text-lg text-neutral-600 mb-6">
        Still have questions? We're here to help.
      </p>
      <button
        id="faq-cta-button"
        class="inline-flex items-center justify-center px-8 py-4 text-white text-base sm:text-lg font-semibold rounded-full transition-all hover:shadow-lg hover:shadow-pink-400/30 focus:outline-none focus:ring-2 focus:ring-pink-400 focus:ring-offset-2 cursor-pointer"
        style="background-color: rgb(251, 113, 133);"
        aria-label="Join the waitlist to get your questions answered"
      >
        Join the Waitlist
      </button>
    </div>
  </div>
</section>

<script>
/**
 * FAQ accordion interaction logic and CTA button handler
 * Handles expanding/collapsing FAQ items with smooth animations
 */
document.addEventListener('DOMContentLoaded', () => {
  // FAQ accordion logic
  const faqButtons = document.querySelectorAll('[data-faq-button]');
  
  faqButtons.forEach((button) => {
    button.addEventListener('click', () => {
      const faqItem = button.closest('.faq-item');
      const answer = faqItem?.querySelector('[data-faq-answer]');
      const icon = button.querySelector('.faq-icon');
      const isExpanded = button.getAttribute('aria-expanded') === 'true';
      
      if (!answer || !icon) return;
      
      // Close all other FAQs (optional - remove if you want multiple open)
      document.querySelectorAll('.faq-item').forEach((item) => {
        if (item !== faqItem) {
          const otherButton = item.querySelector('[data-faq-button]') as HTMLButtonElement | null;
          const otherAnswer = item.querySelector('[data-faq-answer]') as HTMLElement | null;
          const otherIcon = item.querySelector('.faq-icon') as HTMLElement | null;

          if (otherButton && otherAnswer && otherIcon) {
            otherButton.setAttribute('aria-expanded', 'false');
            otherAnswer.setAttribute('aria-hidden', 'true');
            otherAnswer.style.maxHeight = '0';
            otherIcon.style.transform = 'rotate(0deg)';
            item.classList.remove('faq-open');
          }
        }
      });
      
      // Toggle current FAQ
      const answerEl = answer as HTMLElement;
      const iconEl = icon as HTMLElement;

      if (isExpanded) {
        button.setAttribute('aria-expanded', 'false');
        answerEl.setAttribute('aria-hidden', 'true');
        answerEl.style.maxHeight = '0';
        iconEl.style.transform = 'rotate(0deg)';
        faqItem?.classList.remove('faq-open');
      } else {
        button.setAttribute('aria-expanded', 'true');
        answerEl.setAttribute('aria-hidden', 'false');
        answerEl.style.maxHeight = `${answerEl.scrollHeight}px`;
        iconEl.style.transform = 'rotate(180deg)';
        faqItem?.classList.add('faq-open');
      }
    });
  });
  
  // CTA button handler
  const ctaButton = document.getElementById('faq-cta-button');
  if (ctaButton) {
    ctaButton.addEventListener('click', () => {
      const waitlistSection = document.getElementById('waitlist');
      if (waitlistSection) {
        waitlistSection.scrollIntoView({ behavior: 'smooth' });
      }
    });
    
    // Hover effects
    ctaButton.addEventListener('mouseover', () => {
      ctaButton.style.backgroundColor = 'rgb(244, 63, 94)';
    });
    
    ctaButton.addEventListener('mouseout', () => {
      ctaButton.style.backgroundColor = 'rgb(251, 113, 133)';
    });
  }
});
</script>

<style>
  /* Smooth transition for FAQ answer expansion */
  .faq-answer {
    transition: max-height 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  /* Ensure list items from markdown parsing display correctly */
  .faq-answer ul {
    padding-left: 0;
    margin-left: 1.5rem;
  }

  .faq-answer li {
    padding-left: 0.5rem;
  }

  /* Icon rotation transition (chevron stays colored) */
  .faq-icon {
    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    color: var(--pink-400) !important; /* keep chevron pink */
  }

  /**
   * Aggressively force neutral borders/backgrounds and remove pink rings/shadows for FAQ items.
   * Use !important to override utility classes from global styles.
   * Only the chevron (.faq-icon) remains colored.
   */
  .faq-item,
  .faq-item:hover,
  .faq-item:focus-within,
  .faq-item.faq-open {
    border-color: var(--neutral-200) !important;
    background-color: transparent !important;
    box-shadow: none !important;
    outline: none !important;
  }

  /* Ensure button hover/focus doesn't introduce pink fills or rings */
  .faq-button {
    background-color: transparent !important;
  }

  .faq-button:hover {
    background-color: var(--neutral-50) !important;
  }

  .faq-button:focus,
  .faq-button:focus-visible {
    outline: none !important;
    box-shadow: 0 0 0 4px rgba(16,24,40,0.04) !important; /* subtle neutral focus */
  }

  /* Prevent descendants from showing pink borders/shadows or rings */
  .faq-item,
  .faq-item * {
    border-color: var(--neutral-200) !important;
    box-shadow: none !important;
    outline-color: transparent !important;
  }

  /* In case Tailwind utilities add pink ring CSS variables, override them locally */
  .faq-item:where([class*="ring-"], [class*="focus:ring-"], .faq-item *:where([class*="ring-"])) {
    --tw-ring-color: rgba(0,0,0,0) !important;
  }

  /* Keep only the chevron colored; ensure it cannot be overridden */
  .faq-item .faq-icon {
    color: var(--pink-400) !important;
    stroke: currentColor;
  }
</style>